---
http_interactions:
- request:
    method: get
    uri: https://www.berghain.berlin/en/program/
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 22 Feb 2023 12:14:36 GMT
      Content-Type:
      - text/html; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      - Cookie
      X-Frame-Options:
      - SAMEORIGIN
      Content-Language:
      - en
      Expires:
      - Wed, 22 Feb 2023 12:17:36 GMT
      Cache-Control:
      - max-age=180
      Strict-Transport-Security:
      - max-age=15724800; includeSubdomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 22 Feb 2023 12:14:36 GMT
recorded_with: VCR 3.0.3
